#!/usr/bin/env python3
"""
Script para asignar contrase√±a por defecto a usuarios sin contrase√±a
Contrase√±a por defecto: 'FraseDiaria'
"""

import sys
import os
from werkzeug.security import generate_password_hash

# =========================================================
# L√≥gica para agregar la ruta del proyecto al sys.path
# Esto es crucial para que las importaciones funcionen
# en cualquier subdirectorio de un servidor.
# =========================================================

# Obtiene la ruta del directorio del archivo actual (scripts/)
current_script_dir = os.path.dirname(os.path.abspath(__file__))

# Sube un nivel para llegar a la ra√≠z del proyecto (mysite/)
project_root = os.path.dirname(current_script_dir)

# Agrega la ruta ra√≠z del proyecto al path de Python
sys.path.insert(0, project_root)

# =========================================================
# Ahora las importaciones absolutas funcionar√°n correctamente
# =========================================================
from database import DatabaseManager
import logging

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def set_default_passwords():
    """
    Asigna contrase√±a por defecto 'FraseDiaria' a usuarios que no tienen contrase√±a
    """
    default_password = 'FraseDiaria'
    password_hash = generate_password_hash(default_password)
    
    try:
        with DatabaseManager.get_connection() as conn:
            cursor = conn.cursor(dictionary=True)
            
            # Buscar usuarios sin contrase√±a (password_hash es NULL o vac√≠o)
            cursor.execute("""
                SELECT id, email, nombre 
                FROM usuarios 
                WHERE password_hash IS NULL OR password_hash = ''
            """)
            
            usuarios_sin_password = cursor.fetchall()
            
            if not usuarios_sin_password:
                logger.info("‚úÖ No se encontraron usuarios sin contrase√±a")
                return 0
            
            logger.info(f"üìã Encontrados {len(usuarios_sin_password)} usuarios sin contrase√±a")
            
            # Mostrar usuarios que ser√°n actualizados
            print("\nüîç Usuarios que recibir√°n contrase√±a por defecto:")
            for usuario in usuarios_sin_password:
                print(f"  - ID: {usuario['id']}, Email: {usuario['email']}, Nombre: {usuario['nombre']}")
            
            # Confirmar acci√≥n
            respuesta = input(f"\n‚ùì ¬øDesea asignar la contrase√±a '{default_password}' a estos {len(usuarios_sin_password)} usuarios? (s/N): ")
            
            if respuesta.lower() not in ['s', 'si', 's√≠', 'y', 'yes']:
                logger.info("‚ùå Operaci√≥n cancelada por el usuario")
                return 0
            
            # Actualizar contrase√±as
            usuarios_actualizados = 0
            
            for usuario in usuarios_sin_password:
                try:
                    cursor.execute("""
                        UPDATE usuarios 
                        SET password_hash = %s 
                        WHERE id = %s
                    """, (password_hash, usuario['id']))
                    
                    usuarios_actualizados += 1
                    logger.info(f"‚úÖ Contrase√±a asignada a usuario ID: {usuario['id']} ({usuario['email']})")
                    
                except Exception as e:
                    logger.error(f"‚ùå Error al actualizar usuario ID {usuario['id']}: {e}")
            
            # Confirmar cambios
            conn.commit()
            
            logger.info(f"üéâ Proceso completado: {usuarios_actualizados} usuarios actualizados")
            print(f"\n‚úÖ Se asign√≥ contrase√±a por defecto a {usuarios_actualizados} usuarios")
            print(f"üîë Contrase√±a asignada: '{default_password}'")
            print("üìß Los usuarios pueden cambiar su contrase√±a desde su perfil")
            
            return usuarios_actualizados
            
    except Exception as e:
        logger.error(f"‚ùå Error en el proceso: {e}")
        print(f"\n‚ùå Error: {e}")
        return 0

def main():
    """
    Funci√≥n principal del script
    """
    print("üîê Script para asignar contrase√±as por defecto")
    print("=" * 50)
    
    try:
        usuarios_actualizados = set_default_passwords()
        
        if usuarios_actualizados > 0:
            print(f"\nüéØ Resumen:")
            print(f"   - Usuarios actualizados: {usuarios_actualizados}")
            print(f"   - Contrase√±a por defecto: 'FraseDiaria'")
            print(f"   - Los usuarios pueden cambiar su contrase√±a en su perfil")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Proceso interrumpido por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        logger.error(f"Error inesperado: {e}")

if __name__ == "__main__":
    main()